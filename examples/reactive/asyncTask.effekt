module reactive/asyncTask
import immutable/option
import reactive/types
import reactive/effects

def asyncTask{ task: => Unit / Async }: Unit / {Scheduling} = {
    // Stage 1: Initialize process
    var p = fun(){()} 
    // Stage 2: try task
    p = fun(){ 
        try {
            task()
            do done()
        } with Async {
                              // Stage 3: Await
            def await(poll) = {
                var temp = fun(){()}
                temp = fun() {
                    poll() match {
                                       // Stay in Stage 3.
                        case None() => p = temp
                                       // Go back to Stage 2
                        case Some(v) => resume(v) 
                    }
                }
                p = temp
            }
        }
    }

    def loop(): Unit = {
        p()
        do tick()
        loop()
    }

    loop()
}
