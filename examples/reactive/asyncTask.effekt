module reactive/asyncTask
import immutable/option
import reactive/types
import reactive/effects

def asyncTask[T]{ task: => T / Async }: T / {Scheduling} = {
    // Stage 1: Initialize process
    var p = fun(){None()} 
    // Stage 2: try task
    p = fun(){ 
        try {
            Some(task())
        } with Async {
                              // Stage 3: Await
            def await(poll) = {
                p = fun() {
                    poll() match {
                                       // Stay in Stage 3.
                        case None() => None()
                                       // Go back to Stage 2
                        case Some(v) => p = fun(){ resume(v) }; None()
                    }
                }
                None()
            }
        }
    }
    
    def loop(): T = {
        do tick()
        p() match {
            case Some(d) => d
            case None() => loop()
        }
    }

    loop()
}
