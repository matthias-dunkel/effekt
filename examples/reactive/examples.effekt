module reactive/examples

import reactive/reactive
import reactive/jsenv

// Single Example. After 2 Second the eventloop should terminate.
def example1() = {
    println("Example 1: After 2 seconds 'Done'")
    val jsenv = createEnv()

    eventLoop(
        single(
            fun(){
                do wait(jsenv.waitFor(2000)); 
                println("Done Waiting 1");
            }),    
        jsenv.pollEvents)
}

// ParOr Example. After 5 seconds the eventloop should terminate
def example2() = {
    println("Example 2: Trail 1 should print 'Done'")
    val jsenv = createEnv()
    val trail =  parOr(
            single(fun(){
                do wait(jsenv.waitFor(5000))
                println("Trail 1: Done")
            }),
            single(fun(){
                do wait(jsenv.waitFor(6000))
                println("Trail 2: Done")
            })
        )

    eventLoop(trail, jsenv.pollEvents)
}
// ParAnd Example. After 6 seconds the eventloop should terminate
def example3() = {
    println("Example 3: Both Trails should print 'Done'")
    val jsenv =  createEnv()
    val trail =  parAnd(
            single(fun(){
                do wait(jsenv.waitFor(5000))
                println("Trail 1: Done")
            }),
            single(fun(){
                do wait(jsenv.waitFor(6000))
                println("Trail 2: Done")
            })
        )

    eventLoop(trail, jsenv.pollEvents)
}

// Input Example. Run with Node.js!
def example4() = {
    println("Example 4: An Input Event.")
    val jsenv = createEnv()
    val trail = single(
        fun(){
            val input = do wait(jsenv.question("What is your name?"))
            println(input)
            println(input.unsafeToString())
        }
    )

    eventLoop(trail, jsenv.pollEvents)
}

def example5() = {
    println("Example 5: A little Game: Guess the Number");
    val jsenv = createEnv()
    val trail = single(
        fun(){
            val number = floor(random() * 10.0)
            var guessed = do wait(jsenv.question("Guess a number between 0 and 10")).unsafeToInt()
            while(not(guessed == number)){
                if(guessed < number) {
                    guessed = do wait(jsenv.question("Wrong! Higher. Guess again")).unsafeToInt()
                } else {
                    guessed = do wait(jsenv.question("Wrong! Lower. Guess again")).unsafeToInt()
                }
            }
            println("Correct!")
        }
    )

    eventLoop(trail, jsenv.pollEvents)  
}

def main() = {
    //example1()
    //example2()
    //example3()
    //example4()
    example5()
}
