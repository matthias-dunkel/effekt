// Extern related
module reactive/jsenv
import immutable/list
import immutable/dequeue
import reactive

extern include "jsenv.js"

type EventPoll = => Dequeue[Event] at {}

extern type JSEnv

extern type JSEvent

// Utility

extern type JSArray

extern pure def exampleArray(): JSArray = "[1,2,3,4,5,6]"

extern pure def length(array: JSArray): Int = "array.length"

extern pure def getAt[JSA](array: JSArray, i: Int): JSA = "array[i]"

def toList[JSA, B](array: JSArray){deserializeElements: JSA => B}: List[B] = {
    var list = []
    var index: Int = 0
    var size = array.length()
    while(index < size){
        list = list.append(
            [deserializeElements(
                array.getAt(index)
                )
            ]
            )
        index = index + 1
    }

    list
}

extern pure def createEnv(): JSEnv = "new JSEnv()"

extern pure def pollJSEvents(env: JSEnv): JSArray = "env.pollEvents()"

extern pure def getEventId(event: JSEvent): String = "event.id"

extern pure def getEventData(event: JSEvent): EventData = "event.data"

extern io def waitForSecs(env: JSEnv,t: Int): String = "env.waitForSecs(t)"

// Effekt related

def toEvent(event: JSEvent): Event = Event(event.getEventId(), Base()) // De/Serialize FunktionalitÃ¤t

def createPollEvents(env: JSEnv): EventPoll = fun() {
        var events = pollJSEvents(env).toList{ toEvent }
        Dequeue(events, events.size, [], 0)
}

