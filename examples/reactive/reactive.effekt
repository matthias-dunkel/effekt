import immutable/List

effect Wait {
    def wait(event: String): Unit
}

type Trail {
    Terminated()
    Single(event: String, res: Unit => Unit at {})
    ParOr(firstTrail: Trail, secondTrail: Trail)
}


def single{trail: => Unit / {Wait}}: Trail = {
    var t: Trail = Terminated()
    try {
        region TrailRegion trail()
    } with Wait {
        def wait(event) = region WaitRegion { t = Single(event, resume) }
    }
    t
}

def parOr{firstTrail: => Unit / {Wait}}{secondTrail: => Unit / {Wait}}: Trail = {
    var t1 = single{firstTrail};
    var t2 = single{secondTrail};

    if(t1 != Terminated() && t2 != Terminated()){
        ParOr(t1, t2)
    } else {
        Terminated()
    }
}

//Folds the trail type over an event
def eventHandler(t: Trail, event: String): Trail = {
    t match {
        case Terminated() => Terminated()
        case Single(event, res) => single{ res(()) }
        case ParOr(Terminated(), secondTrail) => Terminated()
        case ParOr(firstTrail, Terminated()) => Terminated()
        case ParOr(firstTrail, secondTrail) => eventHandler(ParOr(
                                                            firstTrail.eventHandler(event),
                                                            secondTrail.eventHandler(event)
                                                            ), event
                                                        ) 
    }
}

def eventLoop(t: Trail): Unit = {
    var trail = t;
    var timer = 10 // Used to showcase
    while(trail != Terminated() && timer >= 0) {
        
        timer = timer - 1; // Used to showcase

        if(timer == 0) {
            trail = trail.eventHandler("1") // Used to showcase
        }
    }
}

def main() = {
    println("Example 1: Single Trail Only")
    eventLoop(
            single{
            println("Waiting for Event 1")
            do wait("1")
            println("Event 1 Happened")
        }
    )
    println("Example 2: ParOr with Single Trails")
    eventLoop(
       parOr{
            println("Trail1: Waiting for Event 1")
            do wait("1")
            println("Trail1: Event 1 Happened")
       } {
            println("Trail2: Waiting for Event 1")
            do wait("1")
            println("Trail2: Event 1 Happened")
       }
    )

}