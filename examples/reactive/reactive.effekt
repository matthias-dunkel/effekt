// Was wird gebraucht:
// Eine Umgebung, die ein Event feuern kann.
// Ein Eventlistener, der bemerkt, wenn ein Event passiert
// Ein EventHandler, der das Event bearbeitet.

// Fragen:
// Wie soll der Hardware Interrupt für zum Beispiel "Press Button" implementiert werden?
// -> Eine await/wait muss dann eine Callback/Effekt funktion bei der Umgebung hinterlegen. Wie ?


// Fragen über Effekt:
// - while true mit println produziert ein memory overflow.
// - import io/args funktioniert nicht
// - import immutable/Array importiert toList nicht importiert. Warum?
import immutable/List

// Version 1

effect Wait {
    def wait(event: String): Unit
}

effect Emit {
    def emit(event: String): Unit
}

def eventHandler(fn:  String =>  Unit / {Emit} at {}) = {
   var callbacks = []
   var events = []
 ()
}

def parOr 
        { firstTrail:  => Unit / {Wait} }
        { secondTrail:  => Unit / {Wait} }
     = {

        var trail1 = region TrailRegion Tuple3("", false, fun(){()})
        var trail2 = region TrailRegion Tuple3("", false,  fun(){()}) 
        try {
            firstTrail()
        } with Wait {
            def wait(event: String) = region WaitRegion {
                trail1 = Tuple3(event, true, fun(){resume(())})
            }         
        }
        
        try {
            secondTrail()
        } with Wait {
            def wait(event: String) = region WaitRegion {
                trail2 = Tuple3(event, true, fun(){resume(())})
            }
        }
        
        def callback(event: String): Unit / {Emit} = region CallbackRegion {
            if(event == trail1.first && trail1.second){
                trail1.third()
                println("")
            } else if (event == trail1.first && trail1.second) {
                trail2.third()
                println("")
            }else {
                ()
            }       
        }

        callback
}

def main() = {
    // Starting with internal events: See https://github.com/ceu-lang/ceu/blob/master/docs/manual/v0.8/manual-toc-v0.8.md#internal-reactions
    
        parOr 
    {
        println("Trail1: Waiting for Event 1")
        do wait("1")
        println("Trail1: Waiting for Event 2")
        do wait("2")
    }
    {
        println("Trail2: Waiting for Event 1")
        do wait("1")
        println("Trail2: Waiting for Event 2")
        do wait("2")
    }
}
