module reactive/reactive
import immutable/list
import immutable/dequeue
import immutable/option

import reactive/types
import reactive/jsenv

effect Wait {
    def wait(event: String): EventData 
}

def single{trail: => Unit / {Wait}}: Coroutine[Event] = {
    var t = Done()
    try {
        region TrailRegion trail()
    } with Wait {
        def wait(event) = region WaitRegion { 
            t = More(
                fun(_event: Event){
                    if(event == _event.id){
                        single{ resume(_event.data) }
                    } else {
                        Done()
                    }
                }
            )
         }
    }
    t
}

def parOr(firstTrail: Coroutine[Event],  secondTrail: Coroutine[Event]): Coroutine[Event] = {
    Tuple2(firstTrail, secondTrail) match {
        case Tuple2(Done(), t) => Done()
        case Tuple2(t, Done()) => Done()
        case Tuple2(More(f1), More(f2)) => More(
            fun(event: Event){
                parOr(f1(event), f2(event))
            }
        ) 
    }
}

def parAnd(firstTrail: Coroutine[Event], secondTrail: Coroutine[Event]): Coroutine[Event] = {
   Tuple2(firstTrail, secondTrail) match {
        case Tuple2(Done(), Done()) => Done()
        case Tuple2(More(f1), More(f2)) => More(
            fun(event: Event){
                parAnd(f1(event), f2(event))
            }
        ) 
    }
}

extern io def nextIteration[A]{f: => A }: Unit = "setTimeout(f, 0);"

def eventLoop (trail: Coroutine[Event], poll: => Dequeue[Event] at {}): Unit / {} = {
    if(trail != Done()) {
       poll().popFront() match {
       case None() => nextIteration{eventLoop(trail, poll)} 
       case Some((e, q)) 
         => trail match {
                    case Done()  => ()
                    case More(f) => nextIteration{eventLoop(f(e), poll)}
            }
        }
    }
}

def main() = {
    var jsenv = createEnv()
    
    eventLoop(
        single{
            var result = do wait(jsenv.waitForSecs(2)); 
            println("Done");
            }, 
            jsenv.pollEvents)
}